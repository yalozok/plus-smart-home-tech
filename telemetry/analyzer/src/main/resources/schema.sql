CREATE TABLE IF NOT EXISTS scenarios
(
    id     BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    hub_id VARCHAR(255),
    name   VARCHAR(255),
    CONSTRAINT pk_scenarios PRIMARY KEY (id),
    CONSTRAINT uq_scenarios_hubId_name UNIQUE (hub_id, name)
);

CREATE TABLE IF NOT EXISTS sensors
(
    id     VARCHAR(255) NOT NULL,
    hub_id VARCHAR(255),
    CONSTRAINT pk_sensors PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS conditions
(
    id        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    type      VARCHAR(255),
    operation VARCHAR(255),
    "value"   INTEGER,
    CONSTRAINT pk_conditions PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS actions
(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    type    VARCHAR(255),
    "value" INTEGER,
    CONSTRAINT pk_actions PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS scenario_conditions
(
    scenario_id  BIGINT  NOT NULL,
    sensor_id    VARCHAR NOT NULL,
    condition_id BIGINT  NOT NULL,
    CONSTRAINT pk_scenario_conditions PRIMARY KEY (scenario_id, sensor_id, condition_id),
    CONSTRAINT fk_scenario_conditions_scenario FOREIGN KEY (scenario_id) REFERENCES scenarios (id),
    CONSTRAINT fk_scenario_conditions_sensor FOREIGN KEY (sensor_id) REFERENCES sensors (id),
    CONSTRAINT fk_scenario_conditions_condition FOREIGN KEY (condition_id) REFERENCES conditions (id)
);

CREATE TABLE IF NOT EXISTS scenario_actions
(
    scenario_id BIGINT  NOT NULL,
    sensor_id   VARCHAR NOT NULL,
    action_id   BIGINT  NOT NULL,
    CONSTRAINT pk_scenario_actions PRIMARY KEY (scenario_id, sensor_id, action_id),
    CONSTRAINT fk_scenario_actions_scenario FOREIGN KEY (scenario_id) REFERENCES scenarios (id),
    CONSTRAINT fk_scenario_actions_sensor FOREIGN KEY (sensor_id) REFERENCES sensors (id),
    CONSTRAINT fk_scenario_actions_action FOREIGN KEY (action_id) REFERENCES actions (id)
);

CREATE OR REPLACE
    FUNCTION check_hub_id()
    RETURNS TRIGGER AS
'
    BEGIN
        IF (SELECT hub_id
            FROM scenarios
            WHERE id = NEW.scenario_id) != (SELECT hub_id
                                            FROM sensors
                                            WHERE id = NEW.sensor_id) THEN
            RAISE EXCEPTION ''Hub IDs do not match for scenario_id % and sensor_id %'', NEW.scenario_id, NEW.sensor_id;
        END IF;
        RETURN NEW;
    END;
'
    LANGUAGE plpgsql;

CREATE OR REPLACE
    TRIGGER tr_bi_scenario_conditions_hub_id_check
    BEFORE INSERT
    ON scenario_conditions
    FOR EACH ROW
EXECUTE FUNCTION check_hub_id();

CREATE OR REPLACE
    TRIGGER tr_bi_scenario_actions_hub_id_check
    BEFORE INSERT
    ON scenario_actions
    FOR EACH ROW
EXECUTE FUNCTION check_hub_id();