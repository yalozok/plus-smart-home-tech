server:
  port: 8081

spring:
  sql:
    init:
      mode: always

  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        jdbc:
          time_zone: UTC
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show_sql: true

  datasource:
    url: jdbc:postgresql://localhost:5432/analyzer
    username: analyzer
    password: analyzer
    driver-class-name: org.postgresql.Driver

logging:
  level:
    org:
      springframework:
        orm.jpa: INFO
        transaction: INFO
        transaction.interceptor: TRACE
        orm.jpa.JpaTransactionManager: DEBUG
    hibernate:
      SQL: DEBUG

grpc:
  client:
    hub-router:
      address: 'static://localhost:59090'
      enableKeepAlive: true
      keepAliveWithoutCalls: true
      negotiationType: plaintext

analyzer:
  kafka:
    hub-consumer:
      properties:
        "key.deserializer": org.apache.kafka.common.serialization.StringDeserializer
        "value.deserializer": ru.yandex.practicum.kafka.serializer.HubEventDeserializer
        "group.id": "analyzer.hub.group.id"
        "client.id": "analyzer-hub"
        "bootstrap.servers": localhost:9092
        "max.poll.records": 100
        "fetch.max.bytes": 3072000
        "max.partition.fetch.bytes": 3072000
        "enable.auto.commit": true
        "auto.offset.reset": "latest"

    snapshot-consumer:
      properties:
        "key.deserializer": org.apache.kafka.common.serialization.StringDeserializer
        "value.deserializer": ru.yandex.practicum.kafka.serializer.SensorsSnapshotDeserializer
        "group.id": "analyzer.snapshot.group.id"
        "client.id": "analyzer-snapshot"
        "bootstrap.servers": localhost:9092
        "max.poll.records": 100
        "fetch.max.bytes": 3072000
        "max.partition.fetch.bytes": 3072000
        "enable.auto.commit": false
        "auto.offset.reset": "earliest"


    topics:
      HUB_EVENTS: telemetry.hubs.v1
      SNAPSHOT_EVENTS: telemetry.snapshots.v1